/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import raidFileStreams.*;
import raidFileStreams.raid0FileStreams.*;
import raidFileStreams.raid1FileStreams.*;
import raidFileStreams.raid10FileStreams.*;
import raidFileStreams.raid01FileStreams.*;
import java.awt.*;

import java.awt.event.*;

import javax.swing.*;

import javax.swing.border.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
/**
 * The main window
 * This is the entry point
 * @author Dnyanesh, Ramana, Chaitanya
 *
 */
public class RaidSelection extends javax.swing.JFrame implements KeyListener 
{
	
    /**
     * Creates new form JavaApplication1UI
     */
    public RaidSelection() {
        initComponents();
        
    }

    private void appendToPane(JTextPane tp, String msg, Color c)
    {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents()
    {
    	setResizable(false);
		setLocation(100,100);
		setSize(430,300);
		setTitle("RAID File Selection");
		
		jDriveName = new javax.swing.JLabel();
        jFilename = new javax.swing.JTextField();
        jFname = new javax.swing.JLabel();
        jFilePath = new javax.swing.JTextField();
        jFnameNew = new javax.swing.JLabel();
        jButtonOk = new javax.swing.JButton();
        jRaidType = new javax.swing.JLabel();
        jButtonCancel = new javax.swing.JButton();
        jComboBox_RaidType = new javax.swing.JComboBox();
        jComboBox_RaidDrives = new javax.swing.JComboBox();
        jComboBox_Files = new javax.swing.JComboBox();
        jButtonRestore = new javax.swing.JButton();
        
        jComboBox_RaidDrives.setEnabled(false);
        jComboBox_Files.setEnabled(false);
        jButtonOk.setEnabled(false);
        //jButtonCancel.setEnabled(false);
        jFilename.setVisible(false);
        jFnameNew.setVisible(false);
        jButtonRestore.setEnabled(false);
        
        this.setResizable(false);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLayout(null);
        
        jDriveName.setText("Drive Name");
        jFname.setText("File Name");
        jFnameNew.setText("New File Name");
        jRaidType.setText("RAID Drive Type");
        
        
        jComboBox_RaidType.setToolTipText("Select a RAID drive type.");
        jComboBox_RaidDrives.setToolTipText("When enabled, lists all RAID drives of the selected type.");
        jComboBox_Files.setToolTipText("<html>When enabled, lists files in the selected RAID drive.<br>If all files are not appearing, please click on Restore Data.<br>Select 'Create a new file' from this list to create a new file on the selected drive.</html>");
        jButtonRestore.setToolTipText("Tries to restore files in the selected RAID drive.");
        
        jFilename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileNameActionPerformed(evt);
            }
        });
        
        jFilename.addKeyListener(this);
        
        jButtonOk.setText("OK");
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jButtonRestore.setText("Restore Data");
        jButtonRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRestoreActionPerformed(evt);
            }
        });
        
        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        
        jComboBox_RaidType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "Raid 0", "Raid 1", "Raid 1+0", "Raid 0+1" }));
        jComboBox_RaidType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	jComboBox_RaidTypeActionPerformed(evt);
            }
        });
        
        jComboBox_RaidDrives.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	jComboBox_RaidDrivesActionPerformed(evt);
            }
        });
        
        jComboBox_Files.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	jComboBox_FilesActionPerformed(evt);
            }
        });
        
        jRaidType.setBounds(20,20,120,30);
        this.add(jRaidType);
        jComboBox_RaidType.setBounds(130,20,280,30);
        this.add(jComboBox_RaidType);
        jDriveName.setBounds(20,70,280,30);
        this.add(jDriveName);
        jComboBox_RaidDrives.setBounds(130,70,280,30);
        this.add(jComboBox_RaidDrives);
        jFname.setBounds(20,140,280,30);
        this.add(jFname);
        jComboBox_Files.setBounds(130,140,280,30);
        this.add(jComboBox_Files);
        jFnameNew.setBounds(20,170,280,30);
        this.add(jFnameNew);
        jFilename.setBounds(130,170,280,30);
        this.add(jFilename);
        
        jButtonOk.setBounds(150,220,100,30);
        this.add(jButtonOk);
        jButtonCancel.setBounds(280,220,100,30);
        this.add(jButtonCancel);
        jButtonRestore.setBounds(130, 100, 130, 30);
        this.add(jButtonRestore);
        
    }// </editor-fold>                        

                                     
    
    public void refresh()
    {
	    	boolean flag=false;
	
	        String Filename = jFilePath.getText()+"/"+jFilename.getText();
	        int RaidOption = jComboBox_RaidType.getSelectedIndex()-1;
	        dispose();
	        
	        SimpleRaidDisplay srd=null;
	        ComplexRaidDisplay crd=null;
			String s;
			int c;
			FileInputStream f;
	        
	        switch(RaidOption)
	        {
	        case 0:
	        	try
	        	{
	        		if(srd==null)
	        			srd=new SimpleRaidDisplay();
	        			
	        		Raid0FileInputStream r=new Raid0FileInputStream(Filename);
	        		s="";
	        		while(true)
	        		{
	        			try
	        			{
	        				//s+=(char)r.readByte();
	        				if(flag)
	        				{
	        					appendToPane(srd.jTextPane3, ((Character)(char)r.readByte()).toString(), Color.RED);
	        					flag=false;
	        				}
	        				else
	        				{
	        					appendToPane(srd.jTextPane3, ((Character)(char)r.readByte()).toString(), Color.BLUE);
	        					flag=true;
	        				}
	        			}
	        			catch(Exception e)
	        			{
	        				break;
	        			}
	        		}
	        		r.close();
	        		//srd.jTextPane3.setText(s);
	        		
	        		try
	        		{
		        		s="";
		        		f=new FileInputStream(Config.getLowerLevelPath(Filename, 1));
		        		while((c=f.read())!=-1)
		        		{
		        			s+=(char)c;
		        		}
		        		f.close();
		        		srd.jTextArea1.setForeground(Color.BLUE);
		        		srd.jTextArea1.setText(s);
	        		}
	        		catch(Exception eeee){}
	        		
	        		try
	        		{
		        		s="";
		        		f=new FileInputStream(Config.getLowerLevelPath(Filename, 2));
		        		while((c=f.read())!=-1)
		        		{
		        			s+=(char)c;
		        		}
		        		f.close();
		        		srd.jTextArea2.setForeground(Color.RED);
		        		srd.jTextArea2.setText(s);
	        		}
	        		catch(Exception eeee){}
	        		
	        		//srd.setVisible(true);
	        		srd.setVisibleForRaid0(Filename, this);
	        	}
	        	catch(CannotOpenFileInRaidDriveException e)
	        	{
	        		//JOptionPane.showMessageDialog(this, e.getMessage());
	        		
	        		if(JOptionPane.showOptionDialog(this, "Do you want to create the file?", "", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null)==0)
	        		{
	        			//yes
	        			try
	        			{
	        				Raid0FileOutputStream rw=new Raid0FileOutputStream(Filename);
	        				rw.close();
	        				//srd.setVisible(true);
	        				srd.setVisibleForRaid0(Filename, this);
	        			}
	        			catch(Exception ee)
	        			{
	        				JOptionPane.showMessageDialog(this, ee.getMessage());
	        				srd.dispose();
	            			this.dispose();
	        			}
	        		}
	        		else
	        		{
	        			//no
	        			srd.dispose();
	        			this.dispose();
	        		}
	        	}
	        	catch(Exception e)
	        	{
	        		JOptionPane.showMessageDialog(this, e.getMessage());
	        		srd.dispose();
	        		this.dispose();
	        	}
	        	break;
	        	
	        case 1:
	        	try
	        	{
	        		if(srd==null)
	        			srd=new SimpleRaidDisplay();
	        		
	        		Raid1FileInputStream r=new Raid1FileInputStream(Filename);
	        		s="";
	        		while(true)
	        		{
	        			try
	        			{
	        				s+=(char)r.readByte();
	        			}
	        			catch(Exception e)
	        			{
	        				break;
	        			}
	        		}
	        		r.close();
	        		srd.jTextPane3.setForeground(Color.BLUE);
	        		srd.jTextPane3.setText(s);
	        		
	        		try
	        		{
		        		s="";
		        		f=new FileInputStream(Config.getLowerLevelPath(Filename, 1));
		        		while((c=f.read())!=-1)
		        		{
		        			s+=(char)c;
		        		}
		        		f.close();
		        		srd.jTextArea1.setForeground(Color.BLUE);
		        		srd.jTextArea1.setText(s);
	        		}
	        		catch(Exception eeee){}
	        		
	        		try
	        		{
		        		s="";
		        		f=new FileInputStream(Config.getLowerLevelPath(Filename, 2));
		        		while((c=f.read())!=-1)
		        		{
		        			s+=(char)c;
		        		}
		        		f.close();
		        		srd.jTextArea2.setForeground(Color.BLUE);
		        		srd.jTextArea2.setText(s);
	        		}
	        		catch(Exception eeee){}
	        		
	        		//srd.setVisible(true);
	        		srd.setVisibleForRaid1(Filename, this);
	        	}
	        	catch(CannotOpenFileInRaidDriveException e)
	        	{
	        		//JOptionPane.showMessageDialog(this, e.getMessage());
	        		
	        		if(JOptionPane.showOptionDialog(this, "Do you want to create the file?", "", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null)==0)
	        		{
	        			//yes
	        			try
	        			{
	        				Raid1FileOutputStream rw=new Raid1FileOutputStream(Filename);
	        				rw.close();
	        				//srd.setVisible(true);
	        				srd.setVisibleForRaid1(Filename, this);
	        			}
	        			catch(Exception ee)
	        			{
	        				JOptionPane.showMessageDialog(this, ee.getMessage());
	        				srd.dispose();
	            			this.dispose();
	        			}
	        		}
	        		else
	        		{
	        			//no
	        			srd.dispose();
	        			this.dispose();
	        		}
	        	}
	        	catch(Exception e)
	        	{
	        		JOptionPane.showMessageDialog(this, e.getMessage());
	        		srd.dispose();
	        		this.dispose();
	        	}
	        	break;
	        	
	        case 2:
	        	try
	        	{
	        		if(crd==null)
	        			crd=new ComplexRaidDisplay();
	        		
	        		s="";
	        		Raid10FileInputStream r=new Raid10FileInputStream(Filename);
	        		while(true)
	        		{
	        			try
	        			{
	        				//s+=(char)r.readByte();
	        				if(flag)
	        				{
	        					appendToPane(crd.jTextPaneRaidMain, ((Character)(char)r.readByte()).toString(), Color.RED);
	        					flag=false;
	        				}
	        				else
	        				{
	        					appendToPane(crd.jTextPaneRaidMain, ((Character)(char)r.readByte()).toString(), Color.BLUE);
	        					flag=true;
	        				}
	        			}
	        			catch(Exception e)
	        			{
	        				break;
	        			}
	        		}
	        		r.close();
	        		//crd.jTextPaneRaidMain.setText(s);
	        		
	        		try
	        		{
		        		s="";
		        		f=new FileInputStream(Config.getLowerLevelPath(Config.getLowerLevelPath(Filename, 1), 1));
		        		while((c=f.read())!=-1)
		        		{
		        			s+=(char)c;
		        		}
		        		f.close();
		        		crd.jTextAreaFile1.setForeground(Color.BLUE);
		        		crd.jTextAreaFile1.setText(s);
	        		}
	        		catch(Exception eeee){}
	        		
	        		try
	        		{
		        		s="";
		        		f=new FileInputStream(Config.getLowerLevelPath(Config.getLowerLevelPath(Filename, 1), 2));
		        		while((c=f.read())!=-1)
		        		{
		        			s+=(char)c;
		        		}
		        		f.close();
		        		crd.jTextAreaFile2.setForeground(Color.BLUE);
		        		crd.jTextAreaFile2.setText(s);
	        		}
	        		catch(Exception eeee){}
	        		
	        		try
	        		{
		        		s="";
		        		f=new FileInputStream(Config.getLowerLevelPath(Config.getLowerLevelPath(Filename, 2), 1));
		        		while((c=f.read())!=-1)
		        		{
		        			s+=(char)c;
		        		}
		        		f.close();
		        		crd.jTextAreaFile3.setForeground(Color.RED);
		        		crd.jTextAreaFile3.setText(s);
	        		}
	        		catch(Exception eeee){}
	        		
	        		try
	        		{
		        		s="";
		        		f=new FileInputStream(Config.getLowerLevelPath(Config.getLowerLevelPath(Filename, 2), 2));
		        		while((c=f.read())!=-1)
		        		{
		        			s+=(char)c;
		        		}
		        		f.close();
		        		crd.jTextAreaFile4.setForeground(Color.RED);
		        		crd.jTextAreaFile4.setText(s);
	        		}
	        		catch(Exception eeee){}
	        		
	        		//crd.setVisible(true);
	        		crd.setVisibleForRaid2(Filename, this);
	        	}
	        	catch(CannotOpenFileInRaidDriveException e)
	        	{
	        		//JOptionPane.showMessageDialog(this, e.getMessage());
	        		
	        		if(JOptionPane.showOptionDialog(this, "Do you want to create the file?", "", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null)==0)
	        		{
	        			//yes
	        			try
	        			{
	        				Raid10FileOutputStream rw=new Raid10FileOutputStream(Filename);
	        				rw.close();
	        				//crd.setVisible(true);
	        				crd.setVisibleForRaid2(Filename, this);
	        			}
	        			catch(Exception ee)
	        			{
	        				JOptionPane.showMessageDialog(this, ee.getMessage());
	        				crd.dispose();
	            			this.dispose();
	        			}
	        		}
	        		else
	        		{
	        			//no
	        			crd.dispose();
	        			this.dispose();
	        		}
	        	}
	        	catch(Exception e)
	        	{
	        		JOptionPane.showMessageDialog(this, e.getMessage());
	        		crd.dispose();
	        		this.dispose();
	        	}
	        	break;
	        case 3:
	        	try
	        	{
	        		if(crd==null)
	        			crd=new ComplexRaidDisplay();
	        		
	        		s="";
	        		Raid01FileInputStream r=new Raid01FileInputStream(Filename);
	        		while(true)
	        		{
	        			try
	        			{
	        				//s+=(char)r.readByte();
	        				if(flag)
	        				{
	        					appendToPane(crd.jTextPaneRaidMain, ((Character)(char)r.readByte()).toString(), Color.RED);
	        					flag=false;
	        				}
	        				else
	        				{
	        					appendToPane(crd.jTextPaneRaidMain, ((Character)(char)r.readByte()).toString(), Color.BLUE);
	        					flag=true;
	        				}
	        			}
	        			catch(Exception e)
	        			{
	        				break;
	        			}
	        		}
	        		r.close();
	        		//crd.jTextPaneRaidMain.setText(s);
	        		
	        		try
	        		{
		        		s="";
		        		f=new FileInputStream(Config.getLowerLevelPath(Config.getLowerLevelPath(Filename, 1), 1));
		        		while((c=f.read())!=-1)
		        		{
		        			s+=(char)c;
		        		}
		        		f.close();
		        		crd.jTextAreaFile1.setForeground(Color.BLUE);
		        		crd.jTextAreaFile1.setText(s);
	        		}
	        		catch(Exception eeee){}
	        		
	        		try
	        		{
		        		s="";
		        		f=new FileInputStream(Config.getLowerLevelPath(Config.getLowerLevelPath(Filename, 1), 2));
		        		while((c=f.read())!=-1)
		        		{
		        			s+=(char)c;
		        		}
		        		f.close();
		        		crd.jTextAreaFile2.setForeground(Color.RED);
		        		crd.jTextAreaFile2.setText(s);
	        		}
	        		catch(Exception eeee){}
	        		
	        		try
	        		{
		        		s="";
		        		f=new FileInputStream(Config.getLowerLevelPath(Config.getLowerLevelPath(Filename, 2), 1));
		        		while((c=f.read())!=-1)
		        		{
		        			s+=(char)c;
		        		}
		        		f.close();
		        		crd.jTextAreaFile3.setForeground(Color.BLUE);
		        		crd.jTextAreaFile3.setText(s);
	        		}
	        		catch(Exception eeee){}
	        		
	        		try
	        		{
		        		s="";
		        		f=new FileInputStream(Config.getLowerLevelPath(Config.getLowerLevelPath(Filename, 2), 2));
		        		while((c=f.read())!=-1)
		        		{
		        			s+=(char)c;
		        		}
		        		f.close();
		        		crd.jTextAreaFile4.setForeground(Color.RED);
		        		crd.jTextAreaFile4.setText(s);
	        		}
	        		catch(Exception eeee){}
	        		
	        		//crd.setVisible(true);
	        		crd.setVisibleForRaid3(Filename, this);
	        	}
	        	catch(CannotOpenFileInRaidDriveException e)
	        	{
	        		//JOptionPane.showMessageDialog(this, e.getMessage());
	        		
	        		if(JOptionPane.showOptionDialog(this, "Do you want to create the file?", "", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null)==0)
	        		{
	        			//yes
	        			try
	        			{
	        				Raid01FileOutputStream rw=new Raid01FileOutputStream(Filename);
	        				rw.close();
	        				//crd.setVisible(true);
	        				crd.setVisibleForRaid3(Filename, this);
	        			}
	        			catch(Exception ee)
	        			{
	        				JOptionPane.showMessageDialog(this, ee.getMessage());
	        				crd.dispose();
	            			this.dispose();
	        			}
	        		}
	        		else
	        		{
	        			//no
	        			crd.dispose();
	        			this.dispose();
	        		}
	        	}
	        	catch(Exception e)
	        	{
	        		JOptionPane.showMessageDialog(this, e.getMessage());
	        		crd.dispose();
	        		this.dispose();
	        	}
	        }
	        
	        //if(RaidOption == 0 || RaidOption == 1) SimpleRaidDisplay.proceed();
	        //if(RaidOption == 2 || RaidOption ==3) ComplexRaidDisplay.proceed();
    	
    }
                                             
    private void jFileNameActionPerformed(java.awt.event.ActionEvent evt) {
    	
    }
 	
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		if(jFilename.getText().length()>0)
		{
			if(!jButtonOk.isEnabled()) jButtonOk.setEnabled(true);
			//if(!jButtonCancel.isEnabled()) jButtonCancel.setEnabled(true);
		}
		else
		{
			if(jButtonOk.isEnabled()) jButtonOk.setEnabled(false);
			//if(jButtonCancel.isEnabled()) jButtonCancel.setEnabled(false);
		}
	}

    
    private void jComboBox_RaidTypeActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:    	
    	jComboBox_RaidDrives.removeAllItems();
    	jComboBox_Files.removeAllItems();
    	
    	if(jComboBox_RaidType.getSelectedIndex()!=0)
    	{
    		jComboBox_RaidDrives.addItem("--Select--");
    		
    		try
    		{
    			String temp1, temp2;
    			BufferedReader br1=new BufferedReader(new FileReader(Config.configFilePath));
    			while((temp1=br1.readLine())!=null)
    			{
    				boolean matchFlag=false;
    				if(temp1.split(",")[0].compareTo(((Integer)(jComboBox_RaidType.getSelectedIndex()-1)).toString())==0)
    				{
    					if(jComboBox_RaidType.getSelectedIndex()>2)
    						jComboBox_RaidDrives.addItem(temp1.split(",")[1]);
    					else
    					{
    						BufferedReader br2=new BufferedReader(new FileReader(Config.configFilePath));
    						while((temp2=br2.readLine())!=null)
    						{
    							if(temp2.split(",")[2].compareTo(temp1.split(",")[1])==0
    								|| temp2.split(",")[3].compareTo(temp1.split(",")[1])==0)
    							{
    								matchFlag=true;
    							}
    						}
    						if(matchFlag==false)
    							jComboBox_RaidDrives.addItem(temp1.split(",")[1]);
    						br2.close();
    					}
    				}
    			}
    		}
    		catch(Exception e)
    		{
    		}
    		
    		jComboBox_RaidDrives.setEnabled(true);
    	}
    	else
    	{
    		jComboBox_RaidDrives.setEnabled(false);
    		jComboBox_Files.setEnabled(false);
    	}
    }                                                  
    
    private void jComboBox_FilesActionPerformed(java.awt.event.ActionEvent evt) {
    	jFilename.setVisible(false);
        jFnameNew.setVisible(false);
        jButtonOk.setEnabled(false);
        //jButtonCancel.setEnabled(false);
    	if(jComboBox_Files.getSelectedIndex()>1)
    	{
    		jFilename.setText((String)jComboBox_Files.getSelectedItem());
    		jButtonOk.setEnabled(true);
            //jButtonCancel.setEnabled(true);
    	}
    	else if(jComboBox_Files.getSelectedIndex()==1)
    	{
    		jFilename.setText("");
    		jFilename.setVisible(true);
            jFnameNew.setVisible(true);
    	}
    }
    
    private void populateComboboxFiles()
    {
    	jComboBox_Files.removeAllItems();
    	
    	if(jComboBox_RaidDrives.getSelectedIndex()!=0)
    	{
    		jComboBox_Files.addItem("--Select--");
    		jComboBox_Files.addItem("Create a new file");
    		
    		try
    		{
    			File d;
	    		switch(jComboBox_RaidType.getSelectedIndex())
	    		{
	    		case 1:
	    		case 2:
	    			d=new File(Config.getLowerLevelPath("/"+(String)jComboBox_RaidDrives.getSelectedItem(), 1));
	    			for(File f:d.listFiles())
	    				if(!f.getName().contains("~")) jComboBox_Files.addItem(f.getName());
	    			break;
	    			
	    		case 3:
	    		case 4:
	    			d=new File(
	    					Config.getLowerLevelPath(
	    							Config.getLowerLevelPath("/"+(String)jComboBox_RaidDrives.getSelectedItem(), 1)
	    							,1)
	    					);
	    			for(File f:d.listFiles())
	    				if(!f.getName().contains("~")) jComboBox_Files.addItem(f.getName());
	    			break;
	    		}
    		}
    		catch(Exception e)
    		{
    		}
    		
    		jButtonRestore.setEnabled(true);
    		jComboBox_Files.setEnabled(true);
    		jFilePath.setText("/"+(String)jComboBox_RaidDrives.getSelectedItem());
    	}
    	else
    	{
    		jButtonRestore.setEnabled(false);
    		jComboBox_Files.setEnabled(false);
    	}
    }
    
    private void jComboBox_RaidDrivesActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
    	this.populateComboboxFiles();
    }

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {                                          

        this.refresh();
    }
    
    private void jButtonRestoreActionPerformed(java.awt.event.ActionEvent evt)
    {
    	try
    	{
    		if(Config.restoreDrive((String)jComboBox_RaidDrives.getSelectedItem())==0)
    		{
    			JOptionPane.showMessageDialog(this, "Drive restoration complete");
    			this.populateComboboxFiles();
    		}
    		else
    			JOptionPane.showMessageDialog(this, "Unrestorable drive");
    	}
    	catch(Exception e)
    	{
    		JOptionPane.showMessageDialog(this, "Drive restoration failed");
    	}
    }
    
    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {                                              
        dispose();
    }                                             

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RaidSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RaidSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RaidSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RaidSelection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new RaidSelection().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JButton jButtonRestore;
    private javax.swing.JComboBox jComboBox_RaidType;
    private javax.swing.JComboBox jComboBox_RaidDrives;
    private javax.swing.JComboBox jComboBox_Files;
    private javax.swing.JTextField jFilePath;
    private javax.swing.JTextField jFilename;
    private javax.swing.JLabel jDriveName;
    private javax.swing.JLabel jFname;
    private javax.swing.JLabel jFnameNew;
    private javax.swing.JLabel jRaidType;
    // End of variables declaration                   
	
}